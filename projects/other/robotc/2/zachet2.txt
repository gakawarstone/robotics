#pragma config(Sensor, S1,     Us,             sensorEV3_Ultrasonic)
#pragma config(Sensor, S2,     L2,             sensorEV3_Color)
#pragma config(Sensor, S3,     L1,             sensorEV3_Color)
#pragma config(Motor,  motorA,          mA,            tmotorEV3_Medium, PIDControl, encoder)
#pragma config(Motor,  motorB,          mB,            tmotorEV3_Large, PIDControl, reversed, encoder)
#pragma config(Motor,  motorC,          mC,            tmotorEV3_Large, PIDControl, reversed, encoder)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//


void liniya()
{
int v=30;
int gr1=SensorValue[L1];
int gr2=SensorValue[L2];
float err;
int Sold;
float u, up, ud;
float kp=2;
float kd=15;

do {
	err=(SensorValue[L1]-gr1)-(SensorValue[L2]-gr2);
	up=kp*err;
	ud=kd*(err-Sold);
	u=up+ud;
	motor[mB]=v+u;
	motor[mC]=v-u;
	Sold=err;
	wait1Msec(1);

	}
	while (SensorValue[Us]>15);
}


task main()
{
	/*while (true){
	err=(SensorValue[L1]-C1)-(SensorValue[L2]-C2);
	up=kp*err;
	ud=kd*(err-errold);
	u=up+ud;
	motor[mB]=v+u;
	motor[mC]=v-u;
	errold=err;
	wait1Msec(1);*/
	
liniya();
	
	
	nMotorEncoder[mB]=0;
	motor[mB]=10;
	motor[mC]=10;
	while(nMotorEncoder[mB]<-70)wait1Msec(1);

	motor[mB]=0;
	motor[mC]=0;
	wait1Msec(1000);
	
	nMotorEncoder[mA]=0;// manipulyator
motor[mA]=10;
while(nMotorEncoder[mA]<100)wait1Msec(1);

liniya();



}